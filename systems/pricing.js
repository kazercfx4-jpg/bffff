const { EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder } = require('discord.js');

class PricingSystem {
    constructor(languageManager) {
        this.lang = languageManager;
        this.plans = this.initializePlans();
        this.features = this.initializeFeatures();
    }

    initializePlans() {
        return {
            basic: {
                id: 'basic',
                name: 'Basic',
                price: 0,
                currency: '‚Ç¨',
                period: 'gratuit',
                color: '#95a5a6',
                emoji: 'üÜì',
                popular: false,
                features: [
                    'obfuscation_basic',
                    'community_support',
                    'basic_presets',
                    'file_limit_small'
                ],
                limits: {
                    filesPerDay: 5,
                    maxFileSize: '1MB',
                    techniques: 10
                }
            },
            premium: {
                id: 'premium',
                name: 'Premium',
                price: 9.99,
                currency: '‚Ç¨',
                period: 'mois',
                color: '#3498db',
                emoji: 'üíé',
                popular: true,
                features: [
                    'obfuscation_advanced',
                    'priority_support',
                    'advanced_presets',
                    'file_limit_medium',
                    'custom_protection',
                    'performance_optimization',
                    'discord_integration'
                ],
                limits: {
                    filesPerDay: 100,
                    maxFileSize: '10MB',
                    techniques: 30
                }
            },
            vip: {
                id: 'vip',
                name: 'VIP',
                price: 19.99,
                currency: '‚Ç¨',
                period: 'mois',
                color: '#f39c12',
                emoji: 'üëë',
                popular: false,
                features: [
                    'obfuscation_military',
                    'vip_support',
                    'unlimited_presets',
                    'file_limit_unlimited',
                    'custom_protection',
                    'performance_optimization',
                    'discord_integration',
                    'ai_assistant',
                    'custom_branding',
                    'api_access',
                    'priority_queue',
                    'exclusive_features'
                ],
                limits: {
                    filesPerDay: 'unlimited',
                    maxFileSize: '100MB',
                    techniques: 50
                }
            },
            enterprise: {
                id: 'enterprise',
                name: 'Enterprise',
                price: 'Sur devis',
                currency: '',
                period: '',
                color: '#9b59b6',
                emoji: 'üè¢',
                popular: false,
                features: [
                    'everything_vip',
                    'dedicated_support',
                    'custom_solutions',
                    'team_management',
                    'advanced_analytics',
                    'white_label',
                    'sla_guarantee',
                    'on_premise'
                ],
                limits: {
                    filesPerDay: 'unlimited',
                    maxFileSize: 'unlimited',
                    techniques: 'unlimited'
                }
            }
        };
    }

    initializeFeatures() {
        return {
            // Obfuscation
            obfuscation_basic: {
                name: 'Obfuscation Basic',
                description: 'Protection de base pour vos scripts Lua',
                emoji: 'üîí'
            },
            obfuscation_advanced: {
                name: 'Obfuscation Avanc√©e',
                description: 'Protection renforc√©e avec 30+ techniques',
                emoji: 'üõ°Ô∏è'
            },
            obfuscation_military: {
                name: 'Protection Militaire',
                description: 'S√©curit√© ultime avec 50+ techniques avanc√©es',
                emoji: '‚öîÔ∏è'
            },
            
            // Support
            community_support: {
                name: 'Support Communautaire',
                description: 'Aide via Discord et documentation',
                emoji: 'üí¨'
            },
            priority_support: {
                name: 'Support Prioritaire',
                description: 'R√©ponse sous 24h, support ticket d√©di√©',
                emoji: 'üé´'
            },
            vip_support: {
                name: 'Support VIP',
                description: 'R√©ponse sous 4h, chat direct, appels vid√©o',
                emoji: 'üëë'
            },
            dedicated_support: {
                name: 'Support D√©di√©',
                description: 'Manager d√©di√©, SLA garanti, support 24/7',
                emoji: 'üè¢'
            },
            
            // Presets
            basic_presets: {
                name: '5 Presets Basic',
                description: 'Presets d\'obfuscation pr√©d√©finis',
                emoji: 'üìã'
            },
            advanced_presets: {
                name: '20 Presets Avanc√©s',
                description: 'Presets optimis√©s pour diff√©rents cas',
                emoji: 'üìö'
            },
            unlimited_presets: {
                name: 'Presets Illimit√©s',
                description: 'Cr√©ez et sauvegardez vos propres presets',
                emoji: '‚ôæÔ∏è'
            },
            
            // Limites de fichiers
            file_limit_small: {
                name: '5 fichiers/jour',
                description: 'Limite quotidienne de traitement',
                emoji: 'üìÑ'
            },
            file_limit_medium: {
                name: '100 fichiers/jour',
                description: 'Limite √©tendue pour projets moyens',
                emoji: 'üìÅ'
            },
            file_limit_unlimited: {
                name: 'Fichiers illimit√©s',
                description: 'Aucune limite de traitement',
                emoji: 'üóÇÔ∏è'
            },
            
            // Fonctionnalit√©s avanc√©es
            custom_protection: {
                name: 'Protection Personnalis√©e',
                description: 'Algorithmes adapt√©s √† vos besoins',
                emoji: 'üé®'
            },
            performance_optimization: {
                name: 'Optimisation Performance',
                description: 'Code obfusqu√© optimis√© pour la vitesse',
                emoji: '‚ö°'
            },
            discord_integration: {
                name: 'Int√©gration Discord',
                description: 'Commandes avanc√©es et notifications',
                emoji: 'üîó'
            },
            ai_assistant: {
                name: 'Assistant IA',
                description: 'IA personnalis√©e pour vos questions',
                emoji: 'ü§ñ'
            },
            custom_branding: {
                name: 'Marque Personnalis√©e',
                description: 'Vos couleurs et logo dans l\'interface',
                emoji: 'üé®'
            },
            api_access: {
                name: 'Acc√®s API',
                description: 'Int√©grez FSProtect dans vos outils',
                emoji: 'üîå'
            },
            priority_queue: {
                name: 'File Prioritaire',
                description: 'Traitement prioritaire de vos fichiers',
                emoji: 'üöÄ'
            },
            exclusive_features: {
                name: 'Fonctionnalit√©s Exclusives',
                description: 'Acc√®s aux nouvelles features en avant-premi√®re',
                emoji: '‚ú®'
            },
            
            // Enterprise uniquement
            everything_vip: {
                name: 'Tout VIP inclus',
                description: 'Toutes les fonctionnalit√©s VIP + bonus',
                emoji: 'üíº'
            },
            custom_solutions: {
                name: 'Solutions Sur Mesure',
                description: 'D√©veloppement sp√©cifique √† vos besoins',
                emoji: 'üõ†Ô∏è'
            },
            team_management: {
                name: 'Gestion d\'√âquipe',
                description: 'Comptes multiples, r√¥les, permissions',
                emoji: 'üë•'
            },
            advanced_analytics: {
                name: 'Analytics Avanc√©es',
                description: 'Statistiques d√©taill√©es et rapports',
                emoji: 'üìä'
            },
            white_label: {
                name: 'Marque Blanche',
                description: 'Solution compl√®te sous votre marque',
                emoji: 'üè∑Ô∏è'
            },
            sla_guarantee: {
                name: 'SLA Garanti',
                description: 'Disponibilit√© 99.9% garantie',
                emoji: 'üìã'
            },
            on_premise: {
                name: 'D√©ploiement On-Premise',
                description: 'Installation sur vos serveurs',
                emoji: 'üèóÔ∏è'
            }
        };
    }

    async showPricing(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle('üíé Tarifs FSProtect')
            .setDescription('Choisissez le plan qui correspond √† vos besoins')
            .setThumbnail(interaction.client.user.displayAvatarURL())
            .setTimestamp();

        // Cr√©er le menu de s√©lection des plans
        const selectMenu = new StringSelectMenuBuilder()
            .setCustomId('pricing_plan_select')
            .setPlaceholder('üîç S√©lectionner un plan pour plus de d√©tails')
            .addOptions(
                Object.values(this.plans).map(plan => ({
                    label: `${plan.emoji} ${plan.name}`,
                    description: plan.price === 0 
                        ? 'Plan gratuit avec fonctionnalit√©s de base'
                        : typeof plan.price === 'string'
                        ? 'Solution entreprise personnalis√©e'
                        : `${plan.price}${plan.currency}/${plan.period}`,
                    value: plan.id
                }))
            );

        const selectRow = new ActionRowBuilder().addComponents(selectMenu);

        // Boutons d'action
        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('pricing_compare')
                    .setLabel('üìä Comparer les plans')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('pricing_contact')
                    .setLabel('üìû Nous contacter')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setURL('https://fsprotect.fr/pricing')
                    .setLabel('üåê Site web')
                    .setStyle(ButtonStyle.Link)
            );

        // Aper√ßu rapide des plans
        let quickOverview = '';
        for (const plan of Object.values(this.plans)) {
            const priceText = plan.price === 0 
                ? 'Gratuit'
                : typeof plan.price === 'string'
                ? plan.price
                : `${plan.price}${plan.currency}/${plan.period}`;
            
            const popularBadge = plan.popular ? ' üî•' : '';
            quickOverview += `${plan.emoji} **${plan.name}** - ${priceText}${popularBadge}\n`;
        }

        embed.addFields({ 
            name: 'üìã Aper√ßu des Plans', 
            value: quickOverview, 
            inline: false 
        });

        await interaction.reply({ 
            embeds: [embed], 
            components: [selectRow, actionRow] 
        });
    }

    async showPlanDetails(interaction, planId) {
        const plan = this.plans[planId];
        if (!plan) {
            return await interaction.reply({
                content: '‚ùå Plan non trouv√©.',
                ephemeral: true
            });
        }

        const embed = new EmbedBuilder()
            .setColor(plan.color)
            .setTitle(`${plan.emoji} Plan ${plan.name}`)
            .setTimestamp();

        // Prix et p√©riode
        if (plan.price === 0) {
            embed.setDescription('**Gratuit** - Parfait pour commencer');
        } else if (typeof plan.price === 'string') {
            embed.setDescription(`**${plan.price}** - Solution personnalis√©e`);
        } else {
            const popularBadge = plan.popular ? ' üî• **POPULAIRE**' : '';
            embed.setDescription(`**${plan.price}${plan.currency}/${plan.period}**${popularBadge}`);
        }

        // Fonctionnalit√©s incluses
        const includedFeatures = plan.features.map(featureId => {
            const feature = this.features[featureId];
            return feature ? `${feature.emoji} ${feature.name}` : featureId;
        }).join('\n');

        embed.addFields({ 
            name: '‚úÖ Fonctionnalit√©s incluses', 
            value: includedFeatures, 
            inline: false 
        });

        // Limites
        if (plan.limits) {
            let limitsText = '';
            if (plan.limits.filesPerDay) {
                limitsText += `üìÑ **Fichiers/jour:** ${plan.limits.filesPerDay}\n`;
            }
            if (plan.limits.maxFileSize) {
                limitsText += `üì¶ **Taille max:** ${plan.limits.maxFileSize}\n`;
            }
            if (plan.limits.techniques) {
                limitsText += `üîß **Techniques:** ${plan.limits.techniques}`;
            }
            
            if (limitsText) {
                embed.addFields({ 
                    name: 'üìä Limites', 
                    value: limitsText, 
                    inline: true 
                });
            }
        }

        // Cas d'usage recommand√©s
        const useCases = this.getUseCases(planId);
        if (useCases) {
            embed.addFields({ 
                name: 'üéØ Recommand√© pour', 
                value: useCases, 
                inline: true 
            });
        }

        // Boutons d'action
        const actionRow = new ActionRowBuilder();
        
        if (plan.price === 0) {
            actionRow.addComponents(
                new ButtonBuilder()
                    .setCustomId('start_free_plan')
                    .setLabel('üöÄ Commencer gratuitement')
                    .setStyle(ButtonStyle.Success)
            );
        } else if (typeof plan.price === 'string') {
            actionRow.addComponents(
                new ButtonBuilder()
                    .setCustomId('contact_enterprise')
                    .setLabel('üìû Contacter les ventes')
                    .setStyle(ButtonStyle.Primary)
            );
        } else {
            actionRow.addComponents(
                new ButtonBuilder()
                    .setCustomId(`subscribe_${planId}`)
                    .setLabel(`üí≥ S'abonner - ${plan.price}‚Ç¨`)
                    .setStyle(ButtonStyle.Success)
            );
        }

        actionRow.addComponents(
            new ButtonBuilder()
                .setCustomId('pricing_back')
                .setLabel('üîô Retour')
                .setStyle(ButtonStyle.Secondary)
        );

        await interaction.reply({ 
            embeds: [embed], 
            components: [actionRow],
            ephemeral: true 
        });
    }

    async showComparison(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle('üìä Comparaison des Plans')
            .setDescription('Tableau comparatif de toutes les fonctionnalit√©s')
            .setTimestamp();

        // Cr√©er le tableau de comparaison
        const plans = Object.values(this.plans);
        const mainFeatures = [
            'obfuscation_basic',
            'obfuscation_advanced',
            'obfuscation_military',
            'community_support',
            'priority_support',
            'vip_support',
            'ai_assistant',
            'api_access',
            'custom_protection'
        ];

        let comparisonText = '```\n';
        comparisonText += 'Fonctionnalit√©'.padEnd(20) + ' | ';
        comparisonText += plans.map(p => p.name.padEnd(10)).join(' | ') + '\n';
        comparisonText += '-'.repeat(20 + (plans.length * 13)) + '\n';

        for (const featureId of mainFeatures) {
            const feature = this.features[featureId];
            if (!feature) continue;

            comparisonText += feature.name.substring(0, 19).padEnd(20) + ' | ';
            
            for (const plan of plans) {
                const hasFeature = plan.features.includes(featureId);
                const symbol = hasFeature ? '‚úÖ' : '‚ùå';
                comparisonText += symbol.padEnd(10) + ' | ';
            }
            comparisonText += '\n';
        }
        comparisonText += '```';

        embed.setDescription(comparisonText);

        // Ajouter les prix
        let pricingText = '';
        for (const plan of plans) {
            const priceText = plan.price === 0 
                ? 'Gratuit'
                : typeof plan.price === 'string'
                ? plan.price
                : `${plan.price}‚Ç¨/${plan.period}`;
            
            pricingText += `${plan.emoji} **${plan.name}:** ${priceText}\n`;
        }

        embed.addFields({ 
            name: 'üí∞ Tarifs', 
            value: pricingText, 
            inline: false 
        });

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('pricing_back')
                    .setLabel('üîô Retour aux tarifs')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('pricing_help')
                    .setLabel('‚ùì Aide au choix')
                    .setStyle(ButtonStyle.Primary)
            );

        await interaction.reply({ 
            embeds: [embed], 
            components: [actionRow],
            ephemeral: true 
        });
    }

    async showPlanRecommendation(interaction) {
        // Cr√©er un questionnaire pour recommander le bon plan
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('üéØ Aide au Choix de Plan')
            .setDescription('R√©pondez √† quelques questions pour trouver le plan id√©al')
            .addFields(
                { 
                    name: 'ü§î Questions √† consid√©rer', 
                    value: '‚Ä¢ Combien de fichiers traitez-vous par jour ?\n‚Ä¢ Avez-vous besoin de support prioritaire ?\n‚Ä¢ Travaillez-vous sur des projets sensibles ?\n‚Ä¢ Utilisez-vous des outils externes ?', 
                    inline: false 
                },
                {
                    name: 'üí° Recommandations rapides',
                    value: 'üÜì **Basic** - Tests et petits projets\nüíé **Premium** - Projets professionnels\nüëë **VIP** - √âquipes et gros volumes\nüè¢ **Enterprise** - Grandes organisations',
                    inline: false
                }
            )
            .setTimestamp();

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('recommend_basic')
                    .setLabel('üÜì Je d√©bute')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('recommend_premium')
                    .setLabel('üíé Usage pro')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('recommend_vip')
                    .setLabel('üëë Gros volumes')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('recommend_enterprise')
                    .setLabel('üè¢ Entreprise')
                    .setStyle(ButtonStyle.Danger)
            );

        await interaction.reply({ 
            embeds: [embed], 
            components: [actionRow],
            ephemeral: true 
        });
    }

    getUseCases(planId) {
        const useCases = {
            basic: '‚Ä¢ D√©couverte de l\'obfuscation\n‚Ä¢ Petits scripts personnels\n‚Ä¢ Tests et apprentissage',
            premium: '‚Ä¢ Projets FiveM professionnels\n‚Ä¢ D√©veloppeurs ind√©pendants\n‚Ä¢ Scripts commerciaux',
            vip: '‚Ä¢ √âquipes de d√©veloppement\n‚Ä¢ Gros serveurs FiveM\n‚Ä¢ Projets √† haute valeur',
            enterprise: '‚Ä¢ Grandes organisations\n‚Ä¢ Solutions sur mesure\n‚Ä¢ D√©ploiements √† grande √©chelle'
        };

        return useCases[planId] || '';
    }

    async handleSubscription(interaction, planId) {
        const plan = this.plans[planId];
        if (!plan || plan.price === 0) {
            return await interaction.reply({
                content: '‚ùå Plan invalide.',
                ephemeral: true
            });
        }

        // Cr√©er l'embed de processus d'abonnement
        const embed = new EmbedBuilder()
            .setColor(plan.color)
            .setTitle(`üí≥ Abonnement ${plan.name}`)
            .setDescription(`Processus d'abonnement pour le plan **${plan.name}**`)
            .addFields(
                { 
                    name: 'üí∞ Prix', 
                    value: `${plan.price}${plan.currency}/${plan.period}`, 
                    inline: true 
                },
                { 
                    name: 'üîÑ Renouvellement', 
                    value: 'Automatique (r√©siliable)', 
                    inline: true 
                },
                { 
                    name: '‚úÖ Activation', 
                    value: 'Imm√©diate', 
                    inline: true 
                }
            )
            .setTimestamp();

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setURL('https://fsprotect.fr/checkout/' + planId)
                    .setLabel('üí≥ Payer avec Stripe')
                    .setStyle(ButtonStyle.Link),
                new ButtonBuilder()
                    .setCustomId('payment_paypal')
                    .setLabel('üü° PayPal')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('payment_crypto')
                    .setLabel('‚Çø Crypto')
                    .setStyle(ButtonStyle.Success)
            );

        await interaction.reply({ 
            embeds: [embed], 
            components: [actionRow],
            ephemeral: true 
        });
    }

    async handleFreePlanStart(interaction) {
        const database = require('./database.js');
        
        // Donner l'acc√®s Basic √† l'utilisateur
        await database.addUserAccess(interaction.user.id, 'basic');

        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('üéâ Bienvenue chez FSProtect!')
            .setDescription('Votre plan Basic gratuit est maintenant actif!')
            .addFields(
                { 
                    name: 'üöÄ Premiers pas', 
                    value: '‚Ä¢ Utilisez `/obfusquer` pour prot√©ger vos scripts\n‚Ä¢ Consultez `/aide` pour voir toutes les commandes\n‚Ä¢ Rejoignez notre Discord pour du support', 
                    inline: false 
                },
                { 
                    name: '‚è´ Upgrade', 
                    value: 'Passez Premium quand vous voulez avec `/prix`', 
                    inline: false 
                }
            )
            .setTimestamp();

        await interaction.reply({ embeds: [embed], ephemeral: true });
    }

    getFAQ() {
        return {
            'Puis-je changer de plan ?': 'Oui, vous pouvez upgrader ou downgrader √† tout moment. Les changements prennent effet imm√©diatement.',
            'Y a-t-il un engagement ?': 'Non, tous nos abonnements sont sans engagement. Vous pouvez annuler √† tout moment.',
            'Que se passe-t-il si j\'annule ?': 'Votre acc√®s reste actif jusqu\'√† la fin de la p√©riode pay√©e, puis vous repassez en Basic.',
            'Les prix incluent-ils la TVA ?': 'Les prix affich√©s sont HT. La TVA sera ajout√©e selon votre localisation.',
            'Puis-je avoir une facture ?': 'Oui, toutes les factures sont disponibles dans votre espace client.',
            'Offrez-vous des r√©ductions ?': 'Nous proposons des r√©ductions pour les √©tudiants, les ONG et les abonnements annuels.'
        };
    }

    async showFAQ(interaction) {
        const faq = this.getFAQ();
        
        const embed = new EmbedBuilder()
            .setColor('#3498db')
            .setTitle('‚ùì Questions Fr√©quentes')
            .setDescription('R√©ponses aux questions les plus courantes')
            .setTimestamp();

        for (const [question, answer] of Object.entries(faq)) {
            embed.addFields({ name: question, value: answer, inline: false });
        }

        const actionRow = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('pricing_back')
                    .setLabel('üîô Retour aux tarifs')
                    .setStyle(ButtonStyle.Secondary),
                new ButtonBuilder()
                    .setCustomId('contact_support')
                    .setLabel('üí¨ Autre question')
                    .setStyle(ButtonStyle.Primary)
            );

        await interaction.reply({ 
            embeds: [embed], 
            components: [actionRow],
            ephemeral: true 
        });
    }

    // Calculateur de ROI pour les entreprises
    async showROICalculator(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#9932cc')
            .setTitle('üìä Calculateur de ROI')
            .setDescription('Calculez le retour sur investissement de FSProtect')
            .addFields(
                {
                    name: 'üí∞ √âconomies typiques',
                    value: '‚Ä¢ **Temps de d√©veloppement:** -70%\n‚Ä¢ **Co√ªts de s√©curit√©:** -60%\n‚Ä¢ **Maintenance:** -50%',
                    inline: true
                },
                {
                    name: 'üìà B√©n√©fices',
                    value: '‚Ä¢ Protection garantie\n‚Ä¢ Support expert\n‚Ä¢ Mises √† jour continues\n‚Ä¢ Conformit√© assur√©e',
                    inline: true
                },
                {
                    name: 'üî¢ Exemple concret',
                    value: 'Serveur avec 1000 joueurs:\n‚Ä¢ Revenus prot√©g√©s: ~50k‚Ç¨/an\n‚Ä¢ Co√ªt FSProtect: 240‚Ç¨/an\n‚Ä¢ **ROI: 20,000%**',
                    inline: false
                }
            )
            .setTimestamp();

        await interaction.reply({ embeds: [embed], ephemeral: true });
    }
}

module.exports = PricingSystem;
